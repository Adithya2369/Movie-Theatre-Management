-- =============================================
--         Database Schema Creation
-- =============================================

-- Users table: stores user information and roles
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    role VARCHAR(20) NOT NULL CHECK (role IN ('admin', 'staff', 'customer')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Movies table: stores movie details
CREATE TABLE movies (
    movie_id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    duration INT NOT NULL,          -- duration in minutes
    genre VARCHAR(50),
    language VARCHAR(50),
    release_date DATE NOT NULL
);

-- Auditoriums table: stores screen details
CREATE TABLE auditoriums (
    auditorium_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    total_seats INT NOT NULL CHECK (total_seats > 0),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Seats table: stores seat details for each auditorium
CREATE TABLE seats (
    seat_id SERIAL PRIMARY KEY,
    auditorium_id INT NOT NULL REFERENCES auditoriums(auditorium_id),
    row_num INT NOT NULL,           -- row number (1,2,3,...)
    seat_num INT NOT NULL,          -- seat number within the row
    UNIQUE (auditorium_id, row_num, seat_num)
);

-- Shows table: stores movie showtimes with fixed slots
CREATE TABLE shows (
    show_id SERIAL PRIMARY KEY,
    movie_id INT NOT NULL REFERENCES movies(movie_id),
    auditorium_id INT NOT NULL REFERENCES auditoriums(auditorium_id),
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    base_price DECIMAL(8,2) NOT NULL CHECK (base_price > 0),
    slot INT CHECK (slot BETWEEN 1 AND 6),  -- 6 fixed time slots per day
    CHECK (end_time > start_time)
);

-- Bookings table: stores booking information
CREATE TABLE bookings (
    booking_id SERIAL PRIMARY KEY,
    show_id INT NOT NULL REFERENCES shows(show_id),
    user_id INT NOT NULL REFERENCES users(user_id),
    booking_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_price DECIMAL(10,2) NOT NULL CHECK (total_price > 0)
);

-- Booking_seats table: many-to-many relationship between bookings and seats
CREATE TABLE booking_seats (
    booking_id INT NOT NULL REFERENCES bookings(booking_id) ON DELETE CASCADE,
    seat_id INT NOT NULL REFERENCES seats(seat_id) ON DELETE CASCADE,
    PRIMARY KEY (booking_id, seat_id)
);

-- =============================================
--         Performance Optimization
-- =============================================
CREATE INDEX idx_shows_movie ON shows(movie_id);
CREATE INDEX idx_shows_auditorium ON shows(auditorium_id);
CREATE INDEX idx_bookings_user ON bookings(user_id);
CREATE INDEX idx_booking_seats ON booking_seats(seat_id);



-- =============================================
--         Insert Test Data
-- =============================================

-- Insert 1 admin, 2 staff members, and 3 customers
INSERT INTO users (email, password_hash, role) VALUES
('admin@theatre.com', 'adminpass', 'admin'),
('staff1@theatre.com', 'staffpass1', 'staff'),
('staff2@theatre.com', 'staffpass2', 'staff'),
('user1@theatre.com', 'userpass1', 'customer'),
('user2@theatre.com', 'userpass2', 'customer'),
('user3@theatre.com', 'userpass3', 'customer');

-- Insert auditoriums/screens
INSERT INTO auditoriums (name, total_seats) VALUES
('Screen 1', 50),   -- 10 rows x 5 seats
('Screen 2', 40);   -- 8 rows x 5 seats

-- Insert sample movies
INSERT INTO movies (title, duration, genre, language, release_date) VALUES
('The Grand Adventure', 120, 'Adventure', 'English', '2025-06-01'),
('Comedy Nights', 110, 'Comedy', 'English', '2025-05-20'),
('Mystery Manor', 130, 'Mystery', 'English', '2025-06-10');

-- Generate seats for Screen 1 (Rows A-J, 5 seats per row)
DO $$
DECLARE
    row_ascii INT;
    seat_num INT;
BEGIN
    -- ASCII values: A=65, J=74
    FOR row_ascii IN 65..74 LOOP
        FOR seat_num IN 1..5 LOOP
            INSERT INTO seats (auditorium_id, row_num, seat_num)
            VALUES (1, row_ascii - 64, seat_num);  -- Convert ASCII to row number
        END LOOP;
    END LOOP;
END $$;

-- Generate seats for Screen 2 (Rows A-H, 5 seats per row)
DO $$
DECLARE
    row_ascii INT;
    seat_num INT;
BEGIN
    -- ASCII values: A=65, H=72
    FOR row_ascii IN 65..72 LOOP
        FOR seat_num IN 1..5 LOOP
            INSERT INTO seats (auditorium_id, row_num, seat_num)
            VALUES (2, row_ascii - 64, seat_num);
        END LOOP;
    END LOOP;
END $$;

-- Insert sample shows with fixed time slots
INSERT INTO shows (movie_id, auditorium_id, start_time, end_time, base_price, slot) VALUES
-- Screen 1 shows
(1, 1, '2025-06-14 06:00:00', '2025-06-14 09:00:00', 200.00, 1),  -- Slot 1: 6-9 AM
(1, 1, '2025-06-14 18:00:00', '2025-06-14 21:00:00', 250.00, 5),  -- Slot 5: 6-9 PM

-- Screen 2 shows
(2, 2, '2025-06-14 09:00:00', '2025-06-14 12:00:00', 180.00, 2),  -- Slot 2: 9 AM-12 PM
(2, 2, '2025-06-14 21:00:00', '2025-06-15 00:00:00', 220.00, 6),  -- Slot 6: 9 PM-12 AM

-- Screen 1 show
(3, 1, '2025-06-15 12:00:00', '2025-06-15 15:00:00', 210.00, 3);  -- Slot 3: 12-3 PM
